// Import the Router function from the express module
import { Router } from "express";

// Create a new router instance
const router = Router();

// Import all the trainer controller functions
import * as trainerController from "./trainers.controllers.js";
import { isValid } from "../../middleware/validation.js";
import {
  addTrainerSchema,
  paramsSchema,
  updateTrainerSchema,
} from "./trainers.validation.js";
import isAuthenticated from "../../middleware/authuntication.js";
import { isAuthorized } from "../../middleware/authorization.js";
import { roles } from "../../utils/enum.js";

// Define the routes and associate them with corresponding controller functions

// Route to add a new trainer
router.post(
  "/addtrainer",
  isAuthenticated,
  isAuthorized([roles.admin]),
  isValid(addTrainerSchema),
  trainerController.addTrainer
);

// Route to get all trainers along with their members
router.get(
  "/getalltrainerswithmembers",
  trainerController.getTrainerWithMembers
);

// Route to get a specific trainer by their ID
router.get(
  "/gettrainerbyid/:id",
  isAuthenticated,
  isAuthorized([roles.admin , roles.trainer]),
  isValid(paramsSchema),
  trainerController.getTrainerById
);

// Route to calculate the revenues generated by a specific trainer by their ID
router.get(
  "/trainerrevenues/:id",
  isAuthenticated,
  isAuthorized([roles.admin]),
  isValid(paramsSchema),
  trainerController.trainerRevenues
);

// Route to update a trainer's data by their ID
router.put(
  "/updatetrainer/:id",
  isAuthenticated,
  isAuthorized([roles.admin , roles.trainer]),
  isValid(updateTrainerSchema),
  trainerController.updateTrainer
);

// Route to delete a trainer from the database using their ID
router.delete(
  "/deletetrainer/:id",
  isAuthenticated,
  isAuthorized([roles.admin]),
  isValid(paramsSchema),
  trainerController.deleteTrainer
);

// Export the router instance for use in other parts of the application
export default router;
